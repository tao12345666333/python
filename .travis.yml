language: bash
services: docker

env:
  - VERSION=3.7 VARIANT=stretch
  - VERSION=3.7 VARIANT=stretch/slim
  - VERSION=3.7 VARIANT=alpine3.7
  - VERSION=3.6 VARIANT=stretch
  - VERSION=3.6 VARIANT=stretch/slim
  - VERSION=3.6 VARIANT=jessie
  - VERSION=3.6 VARIANT=jessie/slim
  - VERSION=3.6 VARIANT=alpine3.7
  - VERSION=3.6 VARIANT=alpine3.6
  - VERSION=3.5 VARIANT=jessie
  - VERSION=3.5 VARIANT=jessie/slim
  - VERSION=3.5 VARIANT=alpine3.7
  - VERSION=3.4 VARIANT=jessie
  - VERSION=3.4 VARIANT=jessie/slim
  - VERSION=3.4 VARIANT=wheezy
  - VERSION=3.4 VARIANT=alpine3.7
  - VERSION=2.7 VARIANT=stretch
  - VERSION=2.7 VARIANT=stretch/slim
  - VERSION=2.7 VARIANT=jessie
  - VERSION=2.7 VARIANT=jessie/slim
  - VERSION=2.7 VARIANT=wheezy
  - VERSION=2.7 VARIANT=alpine3.7
  - VERSION=2.7 VARIANT=alpine3.6

install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - env | sort
  - cd "$VERSION/$VARIANT"
  - slash='/'; image="python:${VERSION}-${VARIANT//$slash/-}"

script:
  - |
    (
      set -Eeuo pipefail
      set -x
      travis_retry docker build -t "$image" .
      ~/official-images/test/run.sh "$image"
      if [ -d onbuild ]; then
        onbuildFrom="$(awk 'toupper($1) == "FROM" { print $2; exit }' onbuild/Dockerfile)"
        docker tag "$image" "$onbuildFrom"
        docker build -t "$image-onbuild" onbuild
        ~/official-images/test/run.sh "$image-onbuild"
      fi
    )

after_script:
  - docker images

# vim:set et ts=2 sw=2:
